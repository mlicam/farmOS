<?php

/**
 * @file
 * Farm plan consideration module.
 */

/**
 * Implements hook_menu().
 */
function farm_plan_consideration_menu() {

  // Add a new consideration.
  $items['farm/plan/%farm_plan/considerations/add'] = array(
    'title' => 'Add a consideration',
    'description' => 'Add a new planning consideration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_plan_consideration_form', 2),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
    'type' => MENU_LOCAL_ACTION,
  );

  // Edit an existing consideration.
  $items['farm/plan/%farm_plan/considerations/%/edit'] = array(
    'title' => 'Edit consideration',
    'description' => 'Edit an existing consideration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_plan_consideration_form', 2, 4),
    'access callback' => 'farm_grazing_plan_access',
    'access arguments' => array(2),
  );

  return $items;
}

/**
 * Get available consideration types provided by modules.
 *
 * @return array
 *   Returns an array of consideration type information.
 */
function farm_plan_consideration_types() {

  // Ask modules for consideration types. Use static caching.
  $consideration_types = &drupal_static(__FUNCTION__);
  if (!isset($consideration_types)) {
    $consideration_types = module_invoke_all('farm_plan_consideration_types');
  }

  // Return consideration types.
  return $consideration_types;
}

/**
 * Implements hook_farm_plan_consideration_types().
 */
function farm_plan_farm_plan_consideration_types() {

  // Provide two basic consideration types: "Management concern" and "Urgent".
  return array(
    'concern' => array(
      'label' => t('Management concern'),
      'color' => 'purple',
    ),
    'urgent' => array(
      'label' => t('Urgent'),
      'color' => 'red',
    ),
  );
}

/**
 * Create a new consideration.
 *
 * @param string $type
 *   The consideration type machine name.
 * @param string $name
 *   The consideration name.
 * @param int $plan_id
 *   The ID of the plan this consideration is linked to (optional).
 * @param int $start
 *   The start timestamp of the consideration.
 * @param int $end
 *   The end timestamp of the consideration.
 *
 * @return object
 *   Returns an empty consideration object.
 */
function farm_plan_consideration_create($type = 'concern', $name = '', $plan_id = NULL, $start = 0, $end = 0) {
  $consideration = new stdClass();
  $consideration->id = NULL;
  $consideration->type = $type;
  $consideration->name = $name;
  $consideration->plan_id = $plan_id;
  $consideration->start = $start;
  $consideration->end = $end;
  $consideration->entities = array();
  return $consideration;
}

/**
 * Save a consideration to the database.
 *
 * @param object $consideration
 *   The consideration object.
 */
function farm_plan_consideration_save(&$consideration) {

  // Build the primary keys parameter for drupal_write_record() depending on
  // whether or not the consideration has an ID (insert vs update).
  $keys = array();
  if (!empty($consideration->id)) {
    $keys[] = 'id';
  }

  // Save the consideration to the database.
  drupal_write_record('farm_plan_consideration', $consideration, $keys);

  // Save all entity links to the consideration.
  if (!empty($consideration->id)) {

    // First delete all existing links.
    db_query('DELETE FROM {farm_plan_consideration_entity} WHERE consideration_id = :id', array(':id' => $consideration->id));

    // If there are links to save, iterate through them.
    if (!empty($consideration->entities)) {
      foreach ($consideration->entities as $entity_type => $entity_ids) {
        if (!empty($entity_ids)) {
          foreach ($entity_ids as $entity_id) {

            // Save the entity+consideration link.
            $record = array(
              'consideration_id' => $consideration->id,
              'entity_type' => $entity_type,
              'entity_id' => $entity_id,
            );
            drupal_write_record('farm_plan_consideration_entity', $record);
          }
        }
      }
    }
  }
}

/**
 * Load a consideration from the database.
 *
 * @param int $id
 *   The consideration ID.
 *
 * @return object|bool
 *   Returns the consideration object, or FALSE if one doesn't exist.
 */
function farm_plan_consideration_load($id) {

  // Load the consideration record from the database.
  $consideration =  db_query('SELECT * FROM {farm_plan_consideration} WHERE id = :id', array(':id' => $id))->fetch();

  // If a consideration couldn't be loaded, bail.
  if (empty($consideration)) {
    return FALSE;
  }

  // Load entity associations with this consideration.
  $result = db_query('SELECT * FROM {farm_plan_consideration_entity} WHERE consideration_id = :id', array(':id' => $id));
  foreach ($result as $record) {
    $consideration->entities[$record->entity_type][] = $record->entity_id;
  }

  // Return the consideration.
  return $consideration;
}

/**
 * Delete a consideration from the database.
 *
 * @param int $id
 *   The consideration ID.
 */
function farm_plan_consideration_delete($id) {

  // If the ID is empty, bail.
  if (empty($id)) {
    return;
  }

  // Delete the consideration.
  db_query('DELETE FROM {farm_plan_consideration} WHERE id = :id', array(':id' => $id));

  // Delete any entity associations to that consideration.
  db_query('DELETE FROM {farm_plan_consideration_entity} WHERE consideration_id = :id', array(':id' => $id));
}

/**
 * Build the farm plan considerations form.
 */
function farm_plan_consideration_form($form, &$form_state, $plan, $consideration_id = NULL) {

  // Set the page title.
  if (empty($consideration_id)) {
    $title = t('Add a consideration');
  }
  else {
    $title = t('Edit consideration');
  }
  drupal_set_title($title);

  // Store the plan in the form for future use.
  $form['plan'] = array(
    '#type' => 'value',
    '#value' => $plan,
  );

  // Load the consideration record, if one is specified.
  if (!empty($consideration_id)) {
    $consideration = farm_plan_consideration_load($consideration_id);
  }

  // Otherwise, start a new one.
  else {
    $consideration = farm_plan_consideration_create();
  }

  // Store the consideration in the form for future use.
  $form['consideration'] = array(
    '#type' => 'value',
    '#value' => $consideration,
  );

  // Build an array of consideration type options.
  $consideration_types = farm_plan_consideration_types();
  $consideration_type_options = array();
  foreach ($consideration_types as $type => $info) {
    if (!empty($info['label'])) {
      $consideration_type_options[$type] = $info['label'];
    }
  }

  // Consideration type.
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Consideration type'),
    '#description' => t('Specify what type of consideration this is.'),
    '#options' => $consideration_type_options,
    '#default_value' => !empty($consideration->type) ? $consideration->type : 'concern',
    '#required' => TRUE,
    '#ajax' => array(
      'callback' => 'farm_plan_consideration_form_ajax',
      'wrapper' => 'consideration-extra',
    ),
  );

  // Name.
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#description' => t('Provide a brief name for this consideration to describe it.'),
    '#default_value' => !empty($consideration->name) ? $consideration->name : '',
    '#required' => TRUE,
  );

  // Define date format.
  $date_format = 'Y-m-d';

  // Start date.
  $default_start = !empty($consideration->start) ? date($date_format, $consideration->start) : '';
  $form['start'] = array(
    '#type' => 'date_select',
    '#title' => t('Start date'),
    '#date_label_position' => 'within',
    '#date_format' => $date_format,
    '#date_year_range' => '-3:+10',
    '#default_value' => $default_start,
    '#required' => TRUE,
  );

  // End date.
  $default_end = !empty($consideration->end) ? date($date_format, $consideration->end) : '';
  $form['end'] = array(
    '#type' => 'date_select',
    '#title' => t('End date'),
    '#date_label_position' => 'within',
    '#date_format' => $date_format,
    '#date_year_range' => '-3:+10',
    '#default_value' => $default_end,
    '#required' => TRUE,
  );

  // Is this consideration specific to a plan?
  $plan_label = entity_label('farm_plan', $plan);
  if (!empty($consideration_id)) {
    if (!empty($consideration->plan_id)) {
      $form['plan_id'] = array(
        '#type' => 'markup',
        '#markup' => '<p><strong>' . t('This consideration is specific to plan %plan_label.', array('%plan_label' => $plan_label)) . '</strong></p>',
      );
    }
    else {
      $form['plan_id'] = array(
        '#type' => 'markup',
        '#markup' => '<p><strong>' . t('This consideration applies to all plans.') . '</p></strong>',
      );
    }
  }
  else {
    $form['plan_id'] = array(
      '#type' => 'checkbox',
      '#title' => t('Is this consideration specific to plan %plan_label?', array('%plan_label' => $plan_label)),
      '#description' => t('If this is checked, the consideration will only be visible in the context of this plan. Otherwise, it will be visible to all plans.'),
      '#default_value' => FALSE,
    );
  }

  // Add an area for extra fields. Modules can use this to add type-specific
  // configuration for their consideration types. For example: linking them
  // to entities.
  $form['extra'] = array(
    '#prefix' => '<div id="consideration-extra">',
    '#suffix' => '</div>',
  );

  // Submit button.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save consideration'),
  );

  return $form;
}

/**
 * Consideration form ajax callback.
 */
function farm_plan_consideration_form_ajax($form, &$form_state) {
  return $form['extra'];
}

/**
 * Consideration form submit function.
 */
function farm_plan_consideration_form_submit($form, &$form_state) {

  // Load the consideration from the form.
  $consideration = $form_state['values']['consideration'];

  // Format, sanitize, and set information from the submitted values.
  $consideration->type = $form_state['values']['type'];
  $consideration->name = check_plain($form_state['values']['name']);

  // Convert dates to timestamps.
  $consideration->start = strtotime($form_state['values']['start']);
  $consideration->end = strtotime($form_state['values']['end']);

  // If this is a new consideration, and it is specific to the plan, save the
  // plan ID.
  if (empty($consideration->id) && !empty($form_state['values']['plan']->id)) {
    if (!empty($form_state['values']['plan_id'])) {
      $consideration->plan_id = $form_state['values']['plan']->id;
    }
  }

  // Save the consideration.
  farm_plan_consideration_save($consideration);

  // Set a message.
  drupal_set_message(t('Consideration saved.'));
}
